--------lua-----------------------

./redis-cli EVAL "$(cat hello.lua)" 0


redis.call("HSET",'xiaoming', 'email@163.com', 'email@163.com')
redis.call("HSET",'xiaoming', 'email@126.com', 'email@126.com')

return 'ok'


./redis-cli EVAL "$(cat incr-and-stor.lua)" 2 links:counter links:urls http://malcolmgladwellbookgenerator.com/




----------redis---常用命令--------- 

PING				# 是否连接
FLUSHALL       		# 清空所有数据库的所有 key
INFO				# 服务器信息
MONITOR 			# 服务器接收到的命令，调试用  

SAVE 				# 命令执行一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。

BGREWRITEAOF 		# 异步执行一个 AOF（AppendOnly File） 文件重写操作
BGSAVE				# 后台异步保存当前数据库的数据到磁盘。

SHUTDOWN	# 如果有至少一个保存点在等待，执行 SAVE 命令如果 AOF 选项被打开，更新 AOF 文件，关闭 redis 服务器(server)
QUIT 				#命令用于关闭与当前客户端与redis服务的连接。

SELECT 1        	# 切换到 1 号数据库
DBSIZE          	# 当前数据库的 key 数量
FLUSHDB				# 清空当前数据库的所有 key


Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。

String（字符串）

string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。

string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。

string类型是Redis最基本的数据类型，一个键最大能存储512MB。


键(key)

DEL key 			# 删除已存在的键。不存在的 key 会被忽略。
DUMP key 			# 序列化给定 key ，并返回被序列化的值。
EXISTS key 			# 检查给定 key 是否存在。
EXPIRE key 60 		# 设置 key 的过期时间。key 过期后将不再可用。
EXPIREAT key 1293840000 # 以 UNIX 时间戳(unix timestamp)格式设置 key 的过期时间。key 过期后将不再可用。
PEXPIREAT tutorialspoint 1555555555005 # 设置 key 的过期时间，已毫秒技。key 过期后将不再可用。
KEYS PATTERN		# 查找所有符合给定模式 pattern 的 key 。。
MOVE 				# 命令用于将当前数据库的 key 移动到给定的数据库 db 当中。
PERSIST key 		# 移除给定 key 的过期时间，使得 key 永不过期。
PTTL key 			# 以毫秒为单位返回 key 的剩余过期时间。
TTL key 			# 以秒为单位返回 key 的剩余过期时间。
RANDOMKEY			# 从当前数据库中随机返回一个 key 。
RENAME key key2 	# 修改 key 的名称 。
RENAMENX player best_player # 在新的 key 不存在时修改 key 的名称 。

TYPE KEY_NAME 	返回 key 所储存的值的类型。

none (key不存在)
string (字符串)
list (列表)
set (集合)
zset (有序集)
hash (哈希表)



字符串(String)

SET key "new-value" 	# 设置给定 key 的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。
MSET key1 "Hello" key2 "World" # 同时设置一个或多个 key-value 对。
GET key 				# 获取指定 key 的值。如果 key 不存在，返回 nil 。
MGET key1 key2 someOtherKey	# 返回所有(一个或多个)给定 key 的值。 
GETRANGE mykey 0 -1     # 获取存储在指定 key 中字符串的子字符串。字符串的截取范围由 start 和 end 
GETSET mykey "This is my test key"	# 设置指定 key 的值，并返回 key 旧的值。
SETEX mykey 60 redis    # 为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。
SETNX job "programmer"  # 指定的 key 不存在时，为 key 设置指定的值。

STRLEN mykey			# 获取指定 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误。
MSETNX rmdbs "MySQL" nosql "MongoDB" key-value-store "redis" # 所有给定 key 都不存在时，同时设置一个或多个key-value 
PSETEX mykey 1000 "Hello" # 以毫秒为单位设置 key 的生存时间。

// 如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCRBY / INCRBY 命令。
INCR page_view			# 命令将 key 中储存的数字值增一。如果 key 不存在，那么 key 的值会先被初始化为 0 
INCRBY counter 35       # 将 key 中储存的数字加上指定的增量值。
INCRBYFLOAT mykey 0.1   # 为 key 中所储存的值加上指定的浮点数增量值。
DECR failure_times		# 将 key 中储存的数字值减一。
DECRBY count 20  		# 将 key 所储存的值减去指定的减量值。


APPEND myphone "iphone" 	# 命令用于为指定的 key 追加值。如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。 	
SETRANGE key1 6 "Redis"	# 用指定的字符串覆盖给定 key 所储存的字符串值，覆盖的位置从偏移量 offset 开始。



哈希(Hash)

Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。

Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。

HDEL myhash field1 	# 删除哈希表 key 中的一个或多个指定字段，不存在的字段将被忽略。

HEXISTS myhash field1	# 查看哈希表的指定字段是否存在

HGET myhash field1	# 返回给定字段的值。如果给定的字段或 key 不存在时，返回 nil 。

HMGET myhash field1 field2 nofield	# 用于返回哈希表中，一个或多个给定字段的值。

HGETALL myhash		# 返回哈希表中，所有的字段和值。

HSET myhash field1 20 # 为哈希表中的字段值加上指定增量值。

HINCRBYFLOAT mykey field 0.1 # 命令用于为哈希表中的字段值加上指定浮点数增量值。

HKEYS myhash	# 获取哈希表中的所有字段名。

HLEN myhash		# 获取哈希表中字段的数量。

// HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN  
命令用于同时将多个 field-value (字段-值)对设置到哈希表中。

此命令会覆盖哈希表中已存在的字段。

如果哈希表不存在，会创建一个空哈希表，并执行 HMSET 操作。

HMSET myhash field1 "foo" field2 "bar"	

HSET myhash field1 "foo"

HSETNX myhash key-value-store redis # 用于为哈希表中不存在的的字段赋值 。

HVALS myhash	# 返回哈希表所有字段的值。



列表(List)

Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）

一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。


RPUSH mylist "hello"  	# 将一个或多个值插入到列表的尾部(最右边),列表的长度。

RPOPLPUSH mylist myotherlist	# 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。

Rpop mylist 			# 命令用于移除并返回列表的最后一个元素。

RPUSHX mylist2 "bar"	# 将一个或多个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效。

LPUSH list1 "foo"		# 命令将一个或多个值插入到列表头部。 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。

LINDEX mylist 0			# 通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素

// 在 bar 前 加入 yes
LINSERT list1 BEFORE "bar" "Yes" # 在列表的元素前或者后插入元素。 当指定元素不存在于列表中时，不执行任何操作。

LLEN list1				# 返回列表的长度。 如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 

LPOP list1 				# 移除并返回列表的第一个元素。

LPUSHX list2 "bar"		# 一个或多个值插入到已存在的列表头部，列表不存在时操作无效。

LRANGE list1 0 -1    	# 返回列表中指定区间内的元素

// LREM KEY_NAME COUNT VALUE
根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。

COUNT 的值可以是以下几种：

    count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
    count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
    count = 0 : 移除表中所有与 VALUE 相等的值。

LREM mylist -2 "hello"	

LSET mylist 0 "bar"	# 通过索引来设置元素的值。

LTRIM mylist 1 -1   # 对一个列表进行修剪,就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。


BLPOP list1 100   	# 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
BRPOP list1 100 	# 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。




集合(Set)

Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。

Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。

集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。



SADD my_set "hello" # 一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。

Scard my_set		# 命令返回集合中元素的数量。

SDIFF myset myset2	# 返回给定集合之间的差集。不存在的集合 key 将视为空集。

SDIFFSTORE destset myset myset2  # 命令将给定集合之间的差集存储在指定的集合中。如果指定的集合 key 已存在，则会被覆盖。

SINTER myset myset2	# 回给定所有给定集合的交集。 不存在的集合 key 被视为空集。 当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。

SINTERSTORE myset myset1 myset2 # 将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。
 
SISMEMBER myset1 "world" # 判断成员元素是否是集合的成员。

SMEMBERS my_set  	# 返回集合中的所有的成员。 不存在的集合 key 被视为空集合。

SMOVE myset1 myset2 "bar" # 把 bar 元素从 myset2 集合移动到 myset1 集合。

SPOP myset1 		# 移除并返回集合中的一个随机元素。

SRANDMEMBER myset1	# 返回集合中的一个（高版本多个）随机元素。

SREM myset1 "foo"   # 移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。

SUNION myset1 myset2	# 返回给定集合的并集。不存在的集合 key 被视为空集。

SUNIONSTORE destination myset1 myset2  # 给定集合的并集存储在指定的集合 destination 中。



有序集合(zset)

Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。

不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。

有序集合的成员是唯一的,但分数(score)却可以重复。

集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。


ZADD myzset 1 "hello" 

ZADD myzset 1 "foo"

ZADD myzset 2 "world" 3 "bar"

ZCOUNT myzset 1 3	# 计算有序集合中指定分数区间的成员数量。
  
ZCARD myzset 		# 计算集合中元素的数量

ZINCRBY myzset 2 "hello" # 对有序集合中指定成员的分数加上 2

ZINTERSTORE sum_point 2 mid_test fin_test # 一个或多个有序集的值的交集 分数相加  保存到sum_point  2 : 是 后面几个集合

Zlexcount 			# 命令在计算有序集合中指定字典区间内成员数量。

ZRANGE salary 0 -1 WITHSCORES  # 显示整个有序集成员 递增排列

ZREVRANGE salary 0 -1 WITHSCORES     # 递减排列

ZREVRANGEBYSCORE salary 10000 2000  # 逆序排列薪水介于 10000 和 2000 之间的成员


ZRANGEBYSCORE salary (5000 400000   # 显示工资大于 5000 小于等于 400000 的成员

Zrank 				# 返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。

ZREM page_rank baidu.com bing.com # 移除多个元素

ZREMRANGEBYSCORE salary 1500 3500      # 移除所有薪水在 1500 到 3500 内的员工

ZSCORE salary peter              # 返回有序集中，成员的分数值 ，注意返回值是字符串































